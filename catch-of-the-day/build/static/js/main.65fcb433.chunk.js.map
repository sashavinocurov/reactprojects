{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","Fragment","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","transitionOptions","classNames","timeout","enter","exit","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","console","log","updateFish","index","onChange","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","post","data","user","setState","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","addToOrder","details","src","alt","disabled","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","JSON","parse","syncState","setItem","stringify","removeBinding","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.65fcb433.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getFunName } from \"../helpers\";\n\n\nclass StorePicker extends React.Component {\n    // constructor() {\n    //     super();\n    //     this.goToStore = this.goToStore.bind(this);\n    //     //over-wright the method and will attach the binding to it.\n    //     //constructor could be messy if there is alot of pages.\n    // }\n\n    static propTypes = {\n        history: PropTypes.object.isRequired\n    }\n\n    myInput = React.createRef();\n\n    goToStore = event => {\n        // 1. Stop the form from submitting\n        event.preventDefault();\n        // 2. Get the text from that input\n        const storeName = this.myInput.current.value;\n        // 3. Change the page to /store/whatever-they-entered\n        this.props.history.push(`/store/${storeName}`);\n    }\n    render () {\n        return (\n            <React.Fragment>\n                <form className=\"store-selector\" onSubmit={this.goToStore}>\n                    { /* comment should be inside return element */}\n                    <h2> Please Enter A Store </h2>\n                    <input\n                        type=\"text\" \n                        ref={this.myInput}\n                        required\n                        placeholder=\"Store Name\" \n                        defaultValue= {getFunName()}/>\n                    <button type =\"submit\"> Visit Store </button>\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default StorePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n//stateless function method\n// const Header = ({tagline, age}) also can be used \nconst Header = (props) => (\n        <header className=\"top\">\n            <h1>\n                Catch\n                <span className=\"ofThe\">\n                    <span className=\"of\">Of</span>\n                    <span className=\"the\">The</span>\n                </span>\n                Day\n            </h1>\n            <h3 className=\"tagline\">\n                <span>{props.tagline}</span>\n                {/* <span>tagline</span>    ------ continuation of another method. */}\n            </h3>\n        </header>\n    );\n\nHeader.propTypes = {\n    tagline: PropTypes.string.isRequired\n};\n// Jsx component\n// class Header extends React.Component {\n//     render() {\n//         return (\n//             <React.Fragment>\n//                 <header className=\"top\">\n//                     <h1>\n//                         Catch\n//                         <span className=\"ofThe\">\n//                             <span className=\"of\">Of</span>\n//                             <span className=\"the\">The</span>\n//                         </span>\n//                         Day\n//                     </h1>\n//                     <h3 className=\"tagline\">\n//                         <span>{this.props.tagline}</span>\n//                     </h3>\n//                 </header>\n//             </React.Fragment>\n//         )\n//     }\n// }\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatPrice } from \"../helpers\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\n\n\nclass Order extends React.Component {\n    static propTypes = {\n        fishes: PropTypes.object.isRequired,\n        order: PropTypes.object.isRequired,\n        removeFromOrder: PropTypes.func.isRequired,\n    }\n    renderOrder = key => {\n        const fish = this.props.fishes[key];\n        const count = this.props.order[key];\n        const isAvailable = fish &&fish.status === 'available';\n        const transitionOptions ={\n            classNames: \"order\", \n            key,\n            timeout:{ enter:500, exit:500 }\n        };\n        // make sure fish is loaded before we continue\n        if(!fish) return null;\n        if(!isAvailable){\n            return (\n                <CSSTransition {...transitionOptions}>\n                    <li key={key}> Sorry {fish ? fish.name : 'fish'} is no longer available </li>\n                </CSSTransition>\n            );\n        };\n        return (\n            <CSSTransition {...transitionOptions}>\n                <li key={key}>\n                    <span>\n                        <TransitionGroup component=\"span\" className=\"count\">\n                            <CSSTransition classNames=\"count\" key={count} timeout={{ enter: 500, exit: 500 }}>\n                                <span>{count}</span> \n                            </CSSTransition>\n                        </TransitionGroup>\n                    lbs {fish.name}\n                    {formatPrice(count * fish.price)}\n                    </span>\n                    <button onClick={() => this.props.removeFromOrder(key)}>&times;</button>\n                </li>\n            </CSSTransition>\n        );\n    }\n    render() {\n        const orderIds = Object.keys(this.props.order);\n        const total = orderIds.reduce((prevTotal, key) =>{\n            const fish = this.props.fishes[key];\n            const count = this.props.order[key];\n            const isAvailable = fish && fish.status === 'available';\n            if(isAvailable){\n                return prevTotal + (count * fish.price);\n            }\n            return prevTotal;\n        }, 0);\n\n        return(\n            <React.Fragment>\n                <div className=\"order-wrap\">\n                    <h2>Order</h2>\n                    <TransitionGroup component=\"ul\" className=\"order\">\n                        {orderIds.map(this.renderOrder)}\n                    </TransitionGroup>\n                    <div className=\"total\">\n                        Total:\n                        <strong>{formatPrice(total)}</strong>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n  }\n}\n\nexport default Order;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddFishForm extends React.Component {\n    nameRef = React.createRef();\n    priceRef = React.createRef();\n    statusRef = React.createRef();\n    descRef = React.createRef();\n    imageRef = React.createRef();\n\n    static propTypes = {\n        addFish: PropTypes.func.isRequired,\n    };\n\n    createFish = event => {\n        // 1.stop the form from submitting \n        event.preventDefault();\n        const fish = {\n            name: this.nameRef.current.value,\n            price: parseFloat(this.priceRef.current.value),\n            status: this.statusRef.current.value,\n            desc: this.descRef.current.value,\n            image: this.imageRef.current.value\n        }\n        this.props.addFish(fish);\n        //refresh the form\n        event.currentTarget.reset();\n    }\n    render() {\n    return(\n        <React.Fragment>\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\n                <input name =\"name\" ref={this.nameRef} type= \"text\" placeholder= \"Name\" />\n                <input name =\"price\" ref={this.priceRef} type= \"text\" placeholder= \"Price\" />\n                <select name =\"status\" ref={this.statusRef}>\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>\n                </select>\n                <textarea name =\"desc\" ref={this.descRef} placeholder= \"Description\" />\n                <input \n                    name =\"image\" \n                    ref={this.imageRef} \n                    type= \"text\" \n                    placeholder= \"Image\" \n                />\n                <button type=\"submit\"> + Add Fish </button>\n            </form>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default AddFishForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EditFishForm extends React.Component {\n    static propTypes = {\n        fish: PropTypes.shape({\n            image: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            desc: PropTypes.string.isRequired,\n            status: PropTypes.string.isRequired,\n            price: PropTypes.number.isRequired\n        }),\n        index: PropTypes.string.isRequired,\n        updateFish: PropTypes.func.isRequired\n    }\n    handleChange = event => {\n        console.log(event.currentTarget.value);\n        // update that fish\n        // 1. take a copy of the current fish\n        const updateFish = {\n            ...this.props.fish,\n            [event.currentTarget.name]: event.currentTarget.value\n        };\n        this.props.updateFish(this.props.index, updateFish)\n    }\n    render() {\n        return(\n            <div className=\"fish-edit\">\n                <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.props.fish.name} />\n                <input type=\"text\" name=\"price\" onChange={this.handleChange} value={this.props.fish.price} />\n                <select type=\"text\" name=\"status\" onChange={this.handleChange} value={this.props.fish.status} >\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>\n                </select>\n                <textarea name=\"desc\" onChange={this.handleChange} value={this.props.fish.desc} />\n                <input type=\"text\" name=\"image\" onChange={this.handleChange} value={this.props.fish.image} />\n                <button onClick={() => this.props.deleteFish(this.props.index)}>Remove Fish</button>\n            </div>\n    );\n  }\n}\n\nexport default EditFishForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Login = (props) => (\n    <nav className=\"login\">\n        <h2>Inventory Login</h2>\n        <p>Sign in to manage your store's inventory. </p>\n        <button \n            className=\"github\" \n            onClick={() => props.authenticate('Github')}>\n        Log In With GitHub</button>\n        <button \n            className=\"facebook\" \n            onClick={() => props.authenticate('Facebook')}>\n        Log In With Facebook</button>\n        <button \n            className=\"twitter\" \n            onClick={() => props.authenticate('Twitter')}>\n        Log In With Twitter</button>\n    </nav>\n);\n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired\n};\n\nexport default Login;","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n        apiKey: \"AIzaSyCy0GoO_R0tiV68EN82jPDigGXL48RAlEA\",\n        authDomain: \"catch-of-the-day-alex-vin.firebaseapp.com\",\n        databaseURL: \"https://catch-of-the-day-alex-vin.firebaseio.com\", \n});\n\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n//this is a named export\nexport { firebaseApp };\n\n//this is a default export\nexport default base;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\n\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport Login from './Login';\nimport base, { firebaseApp } from \"../base\";\n\nclass Inventory extends React.Component {\n  static propTypes = {\n    fishes: PropTypes.object.isRequired,\n    updateFish: PropTypes.func.isRequired,\n    deleteFish: PropTypes.func.isRequired,\n    loadSampleFishes: PropTypes.func.isRequired,\n  };\n\nstate = {\n  uid: null,\n  owner: null\n};\n\ncomponentDidMount() {\n  firebase.auth().onAuthStateChanged(user => {\n    if(user) {\n      this.authHandler({user});\n    }\n  });\n};\n\nauthHandler = async (authData) => {\n  // 1. Look up the current store in the firebase database\n  const store = await base.fetch(this.props.storeId, { context: this });\n  // 2. Claim it if there is no owner\n  if (!store.owner) {\n    // save it as our own\n    await base.post(`${this.props.storeId}/owner`, {\n      data: authData.user.uid\n    });\n  }\n  // 3. Set the state of the inventory component to reflect the current user\n  this.setState({\n    uid: authData.user.uid,\n    owner: store.owner || authData.user.uid\n  });\n  console.log(authData);\n};\n\nauthenticate = provider => {\n  const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n  firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler);\n};\n\nlogout = async () => {\n  console.log('Logging out!');\n  await firebase.auth().signOut();\n  this.setState({ uid: null });\n}\n\n  render() {\n    const logout = <button onClick={this.logout}>Log Out!</button>\n\n    // 1. Check if they are logged in\n    if (!this.state.uid){\n      return <Login authenticate={this.authenticate}/>;\n    }\n\n    // 2. check if the person logged in is are not current owner of this store.\n    if (this.state.uid !== this.state.owner) {\n      return(\n      <div>\n        <p>Sorry you are not the owner! </p>\n        {logout}\n      </div>\n      );\n    }\n\n    // 3. They must be the owner, just render the inventory editor\n\n    return(\n       <div className=\"inventory\">\n          <h2>Inventory!</h2>\n          {logout}\n          {Object.keys(this.props.fishes).map(key => ( \n            <EditFishForm \n              key={key} \n              index={key}\n              fish={this.props.fishes[key]} \n              updateFish={this.props.updateFish}\n              deleteFish={this.props.deleteFish}\n            />\n          ))}\n          <AddFishForm addFish={this.props.addFish} />\n          <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatPrice } from '../helpers';\n\nclass Fish extends React.Component {\n    static propTypes = {\n        details: PropTypes.shape({\n            image: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            desc: PropTypes.string.isRequired,\n            status: PropTypes.string.isRequired,\n            price: PropTypes.number.isRequired\n        }),\n        addToOrder: PropTypes.func.isRequired,\n    };\n    handleClick = () => {\n        this.props.addToOrder(this.props.index)\n    };\n    render() {\n        const { image, name, price, desc, status } = this.props.details;\n        const isAvailable = status === 'available';\n        return(\n            <li className=\"menu-fish\">\n                <img src={image} alt={name} />\n                <h3 className=\"fish-name\"> \n                    {name}\n                    <span className=\"price\"> {formatPrice(price)} </span>\n                </h3>\n                <p>{desc}</p>\n                <button disabled={!isAvailable} onClick={this.handleClick}> \n                    {isAvailable ? 'Add To Order' : 'Sold Out!'} \n                </button>\n            </li>\n        );\n  }\n};\n\nexport default Fish;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from \"../base\";\n\n\nclass App extends React.Component {\n\n    state= {\n        fishes: {},\n        order: {},\n    };\n\n    static propTypes ={\n        match: PropTypes.object.isRequired\n    };\n\ncomponentDidMount(){\n    const { params } = this.props.match; \n    // first reinstate local storage\n    const localStorageRef = localStorage.getItem(params.storeId);\n    if(localStorageRef) {\n        this.setState({ order: JSON.parse(localStorageRef) })\n    }\n    this.ref = base.syncState(`${params.storeId}/fishes/`, {\n        context: this, \n        state: 'fishes'\n    });\n}\n\ncomponentDidUpdate() {\n    localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n}\n\ncomponentWillUnmount() {\n    base.removeBinding(this.ref);\n}\n\n\n    addFish = fish => {\n        // 1. Take a copy of the existing state. if you take state directly it will mutate \n        const fishes = {...this.state.fishes};\n        // 2. Add our new fish to that fishes variable\n        fishes[`fish${Date.now()}`] =fish;\n        // 3. Set the new fishes object to state\n        this.setState({ fishes });\n    };\n    loadSampleFishes = () => {\n        this.setState({ fishes: sampleFishes });\n    };\n\n    updateFish = (key, updateFish) => {\n        // 1. take a copy of the current state\n        const fishes = { ...this.state.fishes };\n        // 2. update that state\n        fishes[key] = updateFish;\n        // 3. Set that to state\n        this.setState({fishes});\n    };\n\n    deleteFish = key => {\n        // 1. take a copy of state\n        const fishes = { ...this.state.fishes };\n        // 2. update the state\n        fishes[key] = null;\n        // 3. update state\n        this.setState({ fishes });\n    };\n\n    addToOrder = key => {\n        // 1. take a copy of state\n        const order = { ...this.state.order };\n        // 2. Either add to the order, or update the number in our order\n        order[key] = order[key] + 1 || 1;\n        // 3. Call setState to update our state object\n        this.setState({ order });\n    };\n\n    removeFromOrder = key => {\n        // 1. take a copy of state\n        const order = { ...this.state.order };\n        // 2. remove that item from order\n        delete order[key];\n        // 3. Call setState to update our state object\n        this.setState({ order });\n    }\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"catch-of-the-day\">\n                    <div className=\"menu\">\n                        <Header tagline=\"Fresh Seafood Market\" />\n                        <ul className=\"fishes\">\n                            {Object.keys(this.state.fishes).map(key => \n                                <Fish \n                                    key={key} \n                                    index={key}\n                                    details={this.state.fishes[key]} \n                                    addToOrder={this.addToOrder} />)}\n                        </ul>\n                    </div>\n                    <Order \n                        fishes={this.state.fishes} \n                        order={this.state.order}\n                        removeFromOrder={this.removeFromOrder}\n                    />\n                    {/* {...this.state} passing every single object in the state into a component */} \n                    <Inventory \n                        addFish={this.addFish} \n                        updateFish={this.updateFish}\n                        deleteFish={this.deleteFish}\n                        loadSampleFishes={this.loadSampleFishes} \n                        fishes={this.state.fishes}\n                        storeId={this.props.match.params.storeId}\n                    />\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App; ","import React from 'react';\n\nconst NotFound = () => (\n    <div>\n        <h2>Not Found !11!!!1!</h2>\n    </div>\n)\n\nexport default NotFound;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport StorePicker from './StorePicker';\nimport App from \"./App\";\nimport NotFound from \"./NotFound\";\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component = {StorePicker} />\n            <Route path=\"/store/:storeId\" component = {App} />\n            <Route component = {NotFound} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","import React from 'react';\nimport { render } from 'react-dom';\n\nimport './css/style.css';\n\n\nimport Router from \"./components/Router\";\n\n\nrender(<Router />, document.querySelector('#main'));"],"sourceRoot":""}